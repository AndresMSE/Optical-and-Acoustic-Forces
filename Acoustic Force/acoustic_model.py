    def plot_forces(self, mode, kind, inline,**kwargs):
        """
        Given model dictionary from optic_forces, this functions
        plots the result. Asks the axis where you want to plot
        the results.
        Parameters
        -----------
        mode(str) := 
            'auto' - The functions retrieves the model dictionary generated by optic_forces()
            'parellel' - A model dictionary generated by simulation() is used, a key needs to be selected
        kind(str) := 
            'single' - One axis plotted
            'stacked' - Two axis plotted
        inline (boolean) :=
            True - %matplotlib inline
            False - %matplotlib qt
        """
        model = self.model
        # Load & update kwargs
        parameters = {'figsize': (15,8), 't_color': 'black', 't_ticks': '.-',
        'g_color': 'blue', 'g_ticks': '.-', 's_color': 'red', 't_ticks': '.-',  }
        for key, value in kwargs.items():
            parameters[key] = value
        # Unpack results & positions
        z, x, y = model['positions']['z'], model['positions']['x'], model['positions']['y']
        f_tot = model['results']['total']
        a = model['parameters']['a']
        # Plot 
        label = ['x','y','z']
        if inline == True:
            get_ipython().run_line_magic('matplotlib', 'inline')
        else:
            get_ipython().run_line_magic('matplotlib', 'qt')
        if kind == 'single':
            fig, ax = plt.subplots(1,1,figsize=parameters['figsize'])
            selec = input('Single: moving axis?')
            if selec == 'x':
                axis_ = 0
                position = x*1e6
            elif selec == 'y':
                axis_ = 1
                position = y*1e6
            elif selec == 'z':
                axis_ = 2
                position = z*1e6
            totlab = 'F_tot' + '_'  + label[axis_]
            ax.plot(-position,-f_tot[axis_]*1e12,'.-',c='black',label = f'{totlab}')
            ax.set_title(f'Componente {label[axis_]} de las fuerzas como función \
            de la posición de la partícula en el eje {selec}. BC {self.condition}.',fontsize=15)
            ax.set_xlabel(f'Distancia longitudinal {label[axis_]}'+r'$\mu m$')
            ax.set_ylabel('Fuerza [pN]')
            ax.xaxis.label.set_size(15)
            ax.yaxis.label.set_size(15)
            ax.tick_params(axis='x', labelsize=15)
            ax.tick_params(axis='y', labelsize=15)
            ax.yaxis.label.set_size(15)
            ax.xaxis.label.set_size(15)
            ax.grid()
            ax.legend()
            plt.show()
        elif kind == 'stacked':
            fig, axes = plt.subplots(2,1,figsize=(15,20))
            selec = input('Stacked: moving axis?')
            if selec == 'x':
                position = x*1e6
            elif selec == 'y':
                position = y*1e6
            elif selec == 'z':
                position = z*1e6
            for i in range(3):
                ax = axes[i]
                totlab = 'F_tot' + '_'  + label[i]
                ax.plot(position,f_tot[i]*1e12,'.-',c='black',label = f'{totlab}')
                ax.set_title(f'Componente {label[i]} de las fuerzas como función de la posición de la partícula en el eje {selec}. BC {self.condition}.',fontsize=15)
                ax.set_xlabel(f'Distancia longitudinal {selec} '+r'$\mu m$')
                ax.set_ylabel('Fuerza [pN]')
                ax.xaxis.label.set_size(15)
                ax.yaxis.label.set_size(15)
                ax.tick_params(axis='x', labelsize=15)
                ax.tick_params(axis='y', labelsize=15)
                ax.yaxis.label.set_size(15)
                ax.xaxis.label.set_size(15)
                ax.grid()
                ax.legend()
            plt.show()

    